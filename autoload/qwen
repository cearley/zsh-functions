#!/usr/bin/env zsh

# Qwen command proxy function.
# Checks for @qwen-code/qwen-code package and installs if needed.
# Acts as transparent proxy to the actual qwen command.

# shellcheck source=../lib/_common_proxy_lib
{
    # Determine the project root directory relative to this function file and source the library
    SCRIPT_DIR="${0:A:h}"
    PROJECT_ROOT="${SCRIPT_DIR:h}"
    source "$PROJECT_ROOT/lib/_common_proxy_lib" 2>/dev/null && sourced=1

    # Fallback: try to source from the original relative path for compatibility
    if [[ ! -v sourced ]]; then
        source "${0:A:h}/../lib/_common_proxy_lib" 2>/dev/null && sourced=1
    fi

    # Double fallback: try to source from the project root (for cases where this file is symlinked or copied)
    if [[ ! -v sourced ]]; then
        source "$(cd "$(dirname "$0")/.." && pwd)/lib/_common_proxy_lib" 2>/dev/null && sourced=1
    fi
}

if [[ ! -v sourced ]]; then
    echo "Error: Could not load common proxy library." >&2
    return 1
fi

# Main qwen function - this gets redefined to be the actual function.
qwen() {
    local qwen_pkg="@qwen-code/qwen-code"

    if ! _common_check_nodejs_version 20 "qwen"; then
        return 1
    fi

    if ! _common_is_installed "$qwen_pkg"; then
        if _common_prompt_install "$qwen_pkg"; then
            if ! _common_install_package "$qwen_pkg"; then
                echo "Installation failed. Exiting." >&2
                return 1
            fi
        else
            echo "Installation declined. Exiting."
            return 0
        fi
    fi

    # Run the actual qwen command with all passed arguments and handle errors
    _common_run_command "qwen" "$@"
}

# Run the function with the current arguments.
qwen "$@"