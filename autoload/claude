#!/usr/bin/env zsh

# Claude command proxy function.
# Checks for @anthropic-ai/claude-code package and installs if needed.
# Acts as transparent proxy to the actual claude command.

_claude_check_nodejs_version() {
    if ! command -v node >/dev/null 2>&1; then
        echo "Error: Node.js is not installed. Please install Node.js version 18 or higher." >&2
        return 1
    fi
    
    if ! command -v npm >/dev/null 2>&1; then
        echo "Error: npm is not available. Please ensure npm is installed and in your PATH." >&2
        return 1
    fi
    
    local node_version
    node_version=$(node --version 2>/dev/null | sed 's/^v//')
    
    if [[ -z "$node_version" ]]; then
        echo "Error: Could not determine Node.js version." >&2
        return 1
    fi
    
    local major_version
    major_version=$(echo "$node_version" | cut -d. -f1)
    
    if [[ "$major_version" -lt 18 ]]; then
        echo "Error: Node.js version $node_version is too old. Please install Node.js version 18 or higher." >&2
        return 1
    fi
    
    return 0
}

_claude_is_installed() {
    local claude_pkg="$1"
    npm list -g "$claude_pkg" >/dev/null 2>&1
}

_claude_prompt_install() {
    local claude_pkg="$1"
    echo "The $claude_pkg npm package is not installed."
    echo -n "Would you like to install it globally? (y/N): "
    read -r response
    case "$response" in
        [yY]|[yY][eE][sS])
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

_claude_install_package() {
    local claude_pkg="$1"
    echo "Installing $claude_pkg globally..."
    if npm install -g "$claude_pkg"; then
        echo "Successfully installed $claude_pkg"
        return 0
    else
        echo "Failed to install $claude_pkg" >&2
        return 1
    fi
}

# Main claude function - this gets redefined to be the actual function.
claude() {
    local claude_pkg="@anthropic-ai/claude-code"
    
    if ! _claude_check_nodejs_version; then
        return 1
    fi
    
    if ! _claude_is_installed "$claude_pkg"; then
        if _claude_prompt_install "$claude_pkg"; then
            if ! _claude_install_package "$claude_pkg"; then
                echo "Installation failed. Exiting." >&2
                return 1
            fi
        else
            echo "Installation declined. Exiting."
            return 0
        fi
    fi

    # Run the actual claude command with all passed arguments and handle errors
    if ! command claude "$@"; then
        local exit_code=$?
        echo "Error: Claude command failed with exit code $exit_code" >&2
        return $exit_code
    fi
}

# Run the function with the current arguments.
claude "$@"
